#!/usr/bin/env node
'use strict';

process.bin = process.title = 'screw';

// 获取目录
var fs = require('fs');
var path = require('path');
var screwutil = require('../lib/screw-util.js');
var screwtemp = require('../lib/screw-template');
var screwPath = path.resolve(path.dirname(fs.realpathSync(__filename)),'../');
var workPath = process.cwd();
/**命令行子命令设置***************/
var program = require('commander');
program
  .version('1.0.0');

// 工程初始化
program.command('init [template]')
  // .alias('i')
  .description('根据模板初始化工程,请在空目录下执行该命令,工程默认模板为default')
  // .option('-f, --force','强制初始化，如果目录不为空将清空')
  .action(init);

program.command('server')
  .description('工程监控服务')
  .option('-i,--info','显示当前服务状态')
  .option('-s,--start','启动服务')
  .option('-S,--stop','停止服务')
  .option('-r,--restart','重启服务')
  .action(server);

program.command('release')
  .description('发布工程')
  .option('-l --list','显示已经发布的版本列表')
  .option('-i --info <version>','显示已发布版本的资源文件版本日志')
  .action(release);
program.command('template')
  .description('将当前工程保存为模板')
  .option('-l --list','显示当前模板列表')
  .option('-d --delete <name>','删除模板')
  .option('-s --save <name>','将当前开发目录保存为模板')
  .action(template);

program.parse(process.argv);

// 空参数输出帮助
if (!process.argv.slice(2).length) {
  program.outputHelp();
}
/**命令参数处理部分********************************/
process.on('message', function(m) {
  console.log('process got message:', m);
});
// 收到退出命令时，退出并停止子服务
process.on('SIGINT', function (){
  //停止gulp子进程
  var screwgulp = require('../lib/screw-gulp');
  screwgulp.stop();
  process.kill();
});
// 初始化工程
function init(tempName){
  if (screwutil.checkscrew()) {
    console.log('[screw] 工程目录不为空，无法初始化。');
    return;
  }
  var exec = require('child_process').exec,commstr,
    path_modules = path.join(screwPath,'node_modules'),
    ln_modules = path.join(workPath,'node_modules'),
    path_gulpfile = path.join(screwPath,'lib','gulpfile.js'),
    ln_gulpfile = path.join(workPath,'gulpfile.js');
  if (process.platform==='win32') { //only > win7
    var os = require('os');
    if (os.release()<'6.1') {
      console.log('[screw] error! windows系统仅支持win7以上系统！');
      return;
    }
    commstr = 'mklink /D '+ln_modules+' '+path_modules;
    commstr+='&mklink '+ln_gulpfile+' '+path_gulpfile;
  }else{
    commstr = 'ln -s '+path_modules+' '+ln_modules;
    commstr+=';ln -s '+path_gulpfile+' '+ln_gulpfile;
  }
  exec(commstr,function(error, stdout, stderr){
    if (error !== null) {
      console.log('[screw] error: ' + error);
      return;
    }
  });

  console.log('[screw] 工程初始化...');
  screwtemp.copy(tempName,workPath);
}
function server(){
  if (!screwutil.checkscrew()) {
    console.log('[screw] 不是有效的screw工程目录。'+workPath);
    return;
  }

  var args = Array.prototype.slice.bind(arguments)();
  // console.log(args);
  var options= args.pop();

  var screwgulp = require('../lib/screw-gulp');
  // 当前启动状态
  if (options.info) {
    screwgulp.info();
    return;
  }
  // 启动
  if (options.start) {
    screwgulp.start(workPath);
    return;
  }

  if (options.restart) {
    screwgulp.reStart();
    return;
  }

  if (options.stop) {
    screwgulp.stop();
    return;
  }
  this.outputHelp();
}

// 保存模板
function template(){
  var args = Array.prototype.slice.bind(arguments)();
  // console.log(args);
  var options= args.pop();
  // 列表
  if (options.list) {
    console.log('[screw] 模板列表：');
    screwtemp.list();
    return;
  }
  // 保存
  if (options.save) {
    var workPath = process.cwd();
    if (!screwutil.checkscrew()) {
      console.log('[screw] 当前目录不是有效地screw工程目录');
      return;
    }
    screwtemp.save(options.save,workPath);
    return;
  }
  // 删除
  if (options.delete) {
    var tempName = options.delete;
    screwtemp.del(tempName);
    return;
  }
  this.outputHelp();
}
// 发布版本
function release(){
  var args = Array.prototype.slice.bind(arguments)(),
    options= args.pop();
  if (!screwutil.checkscrew()) {
    console.log('[screw] 当前目录不是有效地screw工程目录');
    return;
  }
  // 列表
  if (options.list) {
    console.log('[screw] 已发布版本列表：');
    fs.readdir(path.join(workPath,screwutil.revSpace), function(err, paths) {
      if (err) {
        console.log('[screw] ',err);
        return;
      }
      paths.forEach(function(p) {
        fs.stat(path.join(screwutil.revSpace,p),function(err,stat){
          if (!err && stat.isDirectory(p)) {
            console.log('> '+p);
          }
        });
      });
    });
    return;
  }
  // 日志
  if (options.info) {
    var verPath = path.join(screwutil.revSpace,options.info);
    if (!fs.existsSync(verPath)) {
      console.log('[screw] 该版本尚未发布');
      return;
    }
    var logPath = path.join(verPath,screwutil.logFile);
    console.log('[screw] v'+options.info+'资源文件版本日志('+logPath+')：');
    fs.readFile(logPath, function (err, data) {
      if (err) return;
      console.log('[screw] ',data.toString());
    });
    return;
  }
  var screwgulp = require('../lib/screw-gulp');
  screwgulp.release();
}
